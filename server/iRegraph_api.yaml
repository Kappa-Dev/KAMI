swagger: '2.0'
info:
  title: iRegraph http api
  description: Manipulate graph on the server
  version: "1.0.0"
# the domain of the service
host: api.executableknowledge.org
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /iregraph
produces:
  - application/json
paths:
  /hierarchy{hierarchy_path}:
    post:
      summary: post a new hierarchy
      parameters:
        - name: hierarchy_path
          in: path
          description: The path to place the top of the hierarchy
          required: true
          type: string
        - name: new_hierarchy
          in: body
          required: true
          schema:
            $ref: '#/definitions/GraphHierarchy'
      responses:
        404:
          description: the hierarchy was not valid
        200:
          description: the hierarchy was correctly added
    put:
      summary: merge the new hierarchy
      parameters:
        - name: hierarchy_path
          in: path
          description: The path to the graph which is the top of the new hierarchy
          required: true
          type: string
        - name: new_hierarchy
          description: The top graph of the hierarchy must be the same than the one on the server
          in: body
          required: true
          schema:
            $ref: '#/definitions/GraphHierarchy'
      responses:
        404:
          description: the merge failed
        200:
          description: the merge was succesfull
    get:
      summary: get all the hierarchy starting from a graph
      parameters:
        - name: hierarchy_path
          in: path
          description: The path to the graph which is the top of the new hierarchy
          required: true
          type: string

        - name: include_graphs
          in: query
          description: if true return the full hierarchy and not noly the names
          default: false
          type: boolean

        - name: rules
          in: query
          description: if true return the rules defined on the server and not only the graphs
          default: false
          type: boolean

        - name: depth_bound
          in: query
          description: bound the depth of the hierarchy, if 0 only show the top graph
          type: integer

      responses:
        404:
          description: hierarchy not found
        210:
          description: the hierarchy of graph starting from graph_id
          schema:
            $ref: '#/definitions/GraphHierarchy'
        211:
          description: the hierarchy with only the names starting from graph_id
          schema:
            $ref: '#/definitions/NameHierarchy'
        212:
          description: the hierarchy with only the names, rule names included
          schema:
            $ref: '#/definitions/NameHierarchyRules'
        213:
          description: the hierarchy of graphs, rules included
          schema:
            $ref: '#/definitions/GraphHierarchyRules'
        default:
          description: Unexpected error
    delete:
      summary: delete a graph and all its children
      parameters:
        - name: hierarchy_path
          in: path
          description: The path to the graph which is the top of the hierarchy to delete
          required: true
          type: string
      responses:
        200:
          description: the graph was deleted
        404:
          description: the hierarchy is not valid
        default:
          description: Unexpected error

  /rule{rule_id}:
    post:
      summary: create a new rule
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: pattern_name
          in: query
          required: true
          description: |
            the name of the graph used as a left hand size for the rule,
            (not the absolute path)
          type: string
      responses:
        200:
          description: the rule was created
        409:
          description: a rule or graph already exists with this name
        404:
          description: father of the rule not found or argument missing
        default:
          description: Unexpected error
    get:
      summary: returns the rule
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string

      responses:
        200:
          description: the rule
          schema:
            $ref: '#/definitions/Rule'
        404:
          description: the rule was not found
        default:
          description: Unexpected error

    delete:
      summary: delete a rule
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule to delete
          required: true
          type: string
      responses:
        200:
          description: the rule was deleted
        404:
          description: the rule was not found
        default:
          description: Unexpected error

  /graph/apply{graph_id}:
    post:
      summary: create a new graph by applying a rule
      parameters:
        - name: graph_id
          in: path
          description: The path to the new graph in the hierarchy
          required: true
          type: string
        - name: target_graph
          in: query
          description: the name of the graph from which the new one is created
          type: string
          required: true
        - name: rule_name
          in: query
          description: the name of the rule
          type: string
          required: true
        - name: matching
          in: body
          required: true
          description: the matching used to apply the rule
          schema:
            $ref: '#/definitions/Matching'
      responses:
        200:
          description: the graph was created
        409:
          description: the graph already exists
        404:
          description: the father of the graph was not found or argument missing
        default:
          description: Unexpected error

  /graph{graph_id}:
    get:
      summary: get a graph in json format
      description: get a graph in json format
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string

      responses:
        200:
          description: a graph in json format
          schema:
            $ref: '#/definitions/Graph'
        404:
          description: graph not found
        default:
          description: Unexpected error
    post:
      summary: create a new empty graph
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string

      responses:
        200:
          description: the graph was created
        409:
          description: the graph already exists
        404:
          description: the father of the graph was not found or argument missing
        default:
          description: Unexpected error
    delete:
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph to delete
          required: true
          type: string
      summary: delete a graph
      responses:
        200:
          description: the graph was deleted
        409:
          description: the graph has children, use hierarchy deletion
        404:
          description: the graph was not found
        default:
          description: Unexpected error

  /graph/matchings{graph_id}:
    get:
      summary: returns the possible matchings for a rule on the graph
      parameters:
        - name: graph_id
          in: path
          description: the path to the graph
          required: true
          type: string
        - name: rule_name
          in: query
          description: the name of the rule (which must have the same parent as the graph)
          type: string
          required: true
      responses:
        200:
          description: search of matchings worked
          schema:
            type: array
            items:
              $ref: '#/definitions/Matching'
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/add_node{graph_id}:
    put:
      summary: add a node to a graph
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of node to create
          type: string
          required: true
        - name: node_type
          in: query
          description: type of node to create,
          type: string
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/add_edge{graph_id}:
    put:
      summary: add an edge to a graph
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: source_node
          in: query
          description: id of source node
          type: string
          required: true
        - name: target_node
          in: query
          description: id of target node
          type: string
          required: true
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/rm_node{graph_id}:
    put:
      summary: remove a node from a graph
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of node to delete
          type: string
          required: true
        - name: force
          in: query
          description: force operation and delete all the nodes typed by this one in children graphs
          type: boolean
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/merge_node{graph_id}:
    put:
      summary: merge two nodes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: force
          in: query
          description: force the merging, nodes type by either one will be typed by the new node
          type: boolean
        - name: node1
          in: query
          description: id of first node to merge
          required: true
          type: string
        - name: node2
          in: query
          description: id of second node to merge
          required: true
          type: string
        - name: new_node_id
          in: query
          description: new name for the node resulting of the merge
          required : true
          type: string
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string
  /graph/clone_node{graph_id}:
    put:
      summary: clone a node
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of the node to clone
          type: string
          required: true
        - name: new_node_id
          in: query
          description: name for the node resulting of the clone
          required: true
          type: string
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string


  /graph/rm_edge{graph_id}:
    put:
      summary: remove an edge
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: force
          in: query
          description: force the deletion and propagate to children
          type: boolean
        - name: source_node
          in: query
          description: id of source node of the edge
          type: string
          required: true
        - name: target_node
          in: query
          description: id of target node of the edge
          type: string
          required: true
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/add_attr{graph_id}:
    put:
      summary: add a dictionnary of attributes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          required: true
          in: query
          description: the id of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string
  /graph/rm_attr{graph_id}:
    put:
      summary: remove a dictionnary of attributes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          required: true
          in: query
          description: the id of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string
  /graph/update_attr{graph_id}:
    put:
      summary: update the attributes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          required: true
          in: query
          description: the id of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/add_edge_attr{graph_id}:
    put:
      summary: add a dictionnary of attributes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: source
          required: true
          in: query
          description: the source of the edge to modify
          type: string
        - name: target
          required: true
          in: query
          description: the target of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/rm_edge_attr{graph_id}:
    put:
      summary: remove a dictionnary of attributes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: source
          required: true
          in: query
          description: the source of the edge to modify
          type: string
        - name: target
          required: true
          in: query
          description: the target of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/update_edge_attr{graph_id}:
    put:
      summary: updates a dictionnary of attributes
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: source
          required: true
          in: query
          description: the source of the edge to modify
          type: string
        - name: target
          required: true
          in: query
          description: the target of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string
  /graph/rename_graph{graph_id}:
    put:
      summary: rename a graph
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: new_name
          in: query
          description: the new name of the graph
          type: string
          required: true
      responses:
        200:
          description: graph renamed
        404:
          description: graph was not found
        412:
          description: renaming failed
          schema:
            type: string

  /rule/add_node{rule_id}:
    put:
      summary: modify rule to add a node
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of node to create
          type: string
          required: true
        - name: node_type
          in: query
          description: type of node to create,
          type: string
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /rule/add_edge{rule_id}:
    put:
      summary: modify rule to add an edge
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: source_node
          in: query
          description: id of source node
          type: string
          required: true
        - name: target_node
          in: query
          description: id of target node
          type: string
          required: true
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /rule/rm_node{rule_id}:
    put:
      summary: remove a node from a graph
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of node to delete
          type: string
          required: true
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /rule/merge_node{rule_id}:
    put:
      summary: merge two nodes
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: force
          in: query
          description: force the merging, nodes type by either one will be typed by the new node
          type: boolean
        - name: node1
          in: query
          description: id of first node to merge
          required: true
          type: string
        - name: node2
          in: query
          description: id of second node to merge
          required: true
          type: string
        - name: new_node_id
          in: query
          description: new name for the node resulting of the merge
          required : true
          type: string
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string
  /rule/clone_node{rule_id}:
    put:
      summary: clone a node
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of the node to clone
          type: string
          required: true
        - name: new_node_id
          in: query
          description: name for the node resulting of the clone
          required: true
          type: string
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string


  /rule/rm_edge{rule_id}:
    put:
      summary: remove an edge
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: source_node
          in: query
          description: id of source node of the edge
          type: string
          required: true
        - name: target_node
          in: query
          description: id of target node of the edge
          type: string
          required: true
      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /rule/rename_rule{rule_id}:
    put:
      summary: rename a rule
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: new_name
          in: query
          description: the new name of the rule
          type: string
          required: true
      responses:
        200:
          description: rule renamed
        404:
          description: rule was not found
        412:
          description: renaming failed
          schema:
            type: string

  /rule/add_attr{rule_id}:
    put:
      summary: add a dictionnary of attributes
      parameters:
        - name: rule_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: the id of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /rule/rm_attr{rule_id}:
    put:
      summary: remove a dictionnary of attributes
      parameters:
        - name: rule_id
          in: path
          description: The path to the rule in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: the id of the node to modify
          type: string
        - name: attributes_dictionnary
          in: body
          description: the dictionnary of attributes
          schema:
            type: object
          required: true

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/add_constraint{graph_id}:
    put:
      summary: add a constraint to a node
      description: |
        adding the output constraint t2 <= 3 on node t1 means that any node typed by t1
        may not have more than 3 edges going to nodes typed by t2
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of the node on which to add a constraint
          type: string
          required: true
        - name: input_or_output
          in: query
          description: does the constraint concerns input or output edges
          type: string
          required: true
          enum: ["input","output"]
        - name: constraint_node
          in: query
          description: id of the node referenced by the constraint
          required: true
          type: string
        - name: bound
          in: query
          description: the bound of the contraint
          required: true
          minimum: 1
          type: integer
        - name: le_or_ge
          in: query
          description: constraint_node <= bound or constraint_node >= bound
          required: true
          type: string
          enum: ["le","ge"]

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string
  /graph/delete_constraint{graph_id}:
    put:
      summary: delete a constraint from a node
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
        - name: node_id
          in: query
          description: id of the node on which to add a constraint
          type: string
          required: true
        - name: input_or_output
          in: query
          description: does the constraint concerns input or output edges
          type: string
          required: true
          enum: ["input","output"]
        - name: constraint_node
          in: query
          description: id of the node referenced by the constraint
          required: true
          type: string
        - name: bound
          in: query
          description: the bound of the contraint
          required: true
          type: integer
          minimum: 1
        - name: le_or_ge
          in: query
          description: constraint_node <= bound or constraint_node >= bound
          required: true
          type: string
          enum: ["le","ge"]

      responses:
        200:
          description: modification worked
        404:
          description: graph was not found
        412:
          description: modification failed
          schema:
            type: string

  /graph/validate_constraints{graph_id}:
    put:
      summary: check the constraints to validate a graph
      description: |
        tries to validate the graph, returns all the nodes that failed at least one constraint
      parameters:
        - name: graph_id
          in: path
          description: The path to the graph in the hierarchy
          required: true
          type: string
      responses:
        200:
          description: graph validated
        404:
          description: graph was not found
        412:
          description: some nodes did not pass the tests, return the names of these nodes
          schema:
            type: array
            items:
              type: string

  /graph/get_kappa{graph_id}:
    post:
      summary: submit a list and nugget and recieve the corresponding kappa code
      parameters:
        - name: graph_id
          in: path
          description: the id of the action_graph typing the nuggets
          required: true
          type: string
        - name: nugget_names
          in: body
          description: the names of the nuggets to compile
          required: true
          schema:
            type: object
            properties:
              names:
                type: array
                items:
                  type: string
      responses:
        200:
          description: returns the kappa model
          schema:
            type: object
        404:
          description: the action graph or one nugget was not found
        412:
          description: one nugget is not valid

  /graph/get_graph_attr{graph_id}:
    get:
      summary: get the attributes dictionnary of a graph
      parameters:
        - name: graph_id
          in: path
          description: the id of the graph
          required: true
          type: string
      responses:
        200:
          description: returns the dict
          schema:
            type: object
        404:
          description: the graph was not found

  /graph/update_graph_attr{graph_id}:
    put:
      summary: update the dictionnary of graph attributes
      parameters:
        - name: graph_id
          in: path
          description: the id of the action_graph typing the nuggets
          required: true
          type: string
        - name: update_dict
          in: body
          description: the dictionnay used to update the graph attributes
          required: true
          schema:
            type: object
      responses:
        200:
          description: the update was successful
        404:
          description: the graph was not found

  /graph/delete_graph_attr{graph_id}:
    put:
      summary: delete an element from the dictionnary of graph attributes
      parameters:
        - name: graph_id
          in: path
          description: the id of the action_graph typing the nuggets
          required: true
          type: string
        - name: keypath
          in: body
          description: a list of keys representing the path to the element to delete
          required: true
          schema:
            type: array
            items:
              type: string

      responses:
        200:
          description: the update was successful
        404:
          description: the graph was not found

  /version/:
    get:
      summary: returns the version of the regraph server
      responses:
        200:
          description: the version
          schema:
            type: string

  /graph/unfold{graph_id}:
    put:
      summary: unfold a list of nuggets
      parameters:
        - name: graph_id
          in: path
          description: the id of the action graph
          required: true
          type: string
        - name: new_metamodel_name
          in: query
          required: true
          description: The new name for the parent of the created nuggets
          type: string
        - name: nuggets
          in: body
          required: true
          description: the list of nuggets
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: the update was successful
        404:
          description: the graph was not found
        212:
          description: other failure
  /graph/to_metakappa{graph_id}:
    put:
      summary: unfold a list of nuggets
      parameters:
        - name: graph_id
          in: path
          description: the id of the action graph
          required: true
          type: string
        - name: new_metamodel_name
          in: query
          required: true
          description: The new name for the parent of the created nuggets
          type: string
      responses:
        200:
          description: the translation was successful
        404:
          description: the graph was not found
        212:
          description: other failure

  /graph/get_children{graph_id}:
    get:
      summary: get the subgraphs referencing a node
      parameters:
        - name: graph_id
          in: path
          description: the id of the graph
          required: true
          type: string
        - name: node_id
          in: query
          required: true
          description: The parent node
          type: string
      responses:


        200:
          description: the nuggets
          schema:
            type: object
            properties:
              children:
                type: array
                items:
                  type: string

        404:
          description: the graph was not found
        212:
          description: other failure

  /graph/get_ancestors{graph_id}:
    get:
      summary: get a mapping from nodes to their ancestor
      parameters:
        - name: graph_id
          in: path
          description: the id of the graph
          required: true
          type: string
        - name: degree
          in: query
          required: true
          description: The ancestor degree
          type: integer
          minimum: 1

      responses:

        200:
          description: the mapping
          schema:
            type: array
            items:
              $ref: '#/definitions/Matching'

        404:
          description: the graph was not found
        212:
          description: other failure

  /graph/nugget_from_nodes{graph_id}:
    post:
      summary: submit a of nodes from a graph and create a new graph typed by it
      parameters:
        - name: graph_id
          in: path
          description: the id of the new graph
          required: true
          type: string
        - name: nodes_names
          in: body
          description: the names of the nodes
          required: true
          schema:
            $ref: '#/definitions/NameList'
      responses:
        200:
          description: graph creation successful
        404:
          description: the action graph or one nugget was not found
        412:
          description: one nugget is not valid

definitions:

  Node:
    type: object
    required:
    - id
    - type
    properties:
      id:
        type: string
      type:
        type: string
      input_constraints:
        type: array
        items:
          type: string
      output_constraints:
        type: array
        items:
          type: string
      attrs:
        type: object
  Edge:
    type: object
    required:
    - from
    - to
    properties:
      from:
        type: string
      to:
        type: string


  Graph:
    type: object
    required:
    - edges
    - nodes
    properties:
      edges:
        type: array
        items:
          $ref: '#/definitions/Edge'
      nodes:
        type: array
        items:
          $ref: '#/definitions/Node'

  GraphHierarchy:
    type: object
    required:
    - name
    - top_graph
    - children
    properties:
      name:
        type: string
      top_graph:
        $ref: '#/definitions/Graph'
      children:
        type: array
        items:
          $ref: '#/definitions/GraphHierarchy'
      rules:
        type: array
        items:
          $ref: '#/definitions/Rule'

  GraphHierarchyRules:
    type: object
    required:
    - name
    - rules
    - top_graph
    - children
    properties:
      name:
        type: string
      rules:
        type: array
        items:
          $ref: '#/definitions/Rule'
      top_graph:
        $ref: '#/definitions/Graph'
      children:
        type: array
        items:
          $ref: '#/definitions/GraphHierarchyRules'

  NameHierarchy:
    type: object
    required:
    - name
    - children
    properties:
      name:
        type: string
      children:
        type: array
        items:
          $ref: '#/definitions/NameHierarchy'

  NameHierarchyRules:
    type: object
    required:
    - name
    - children
    - rules
    properties:
      name:
        type: string
      children:
        type: array
        items:
          $ref: '#/definitions/NameHierarchyRules'
      rules:
        type: array
        items:
          type : string

  Rule:
    type: object
    required:
    - name
    - L
    - P
    - R
    - PL
    - PR
    properties:
      name:
        type: string
      L:
        $ref: '#/definitions/Graph'
      P:
        $ref: '#/definitions/Graph'
      R:
        $ref: '#/definitions/Graph'
      PL:
        $ref: '#/definitions/Matching'
      PR:
        $ref: '#/definitions/Matching'

  Couple:
    type: object
    required:
    - left
    - right
    properties:
      left:
        type: string
      right:
        type: string

  Matching:
    type: array
    items:
      $ref: '#/definitions/Couple'

  NameList:
    type: object
    required:
    - names
    properties:
      names:
        type: array
        items:
          type: string

