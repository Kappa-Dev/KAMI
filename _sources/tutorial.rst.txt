.. _tutorial:

Tutorial
========
* :ref:`installation` 
* :ref:`entities`
* :ref:`kami_hierarchy`
* :ref:`black_box`  
* :ref:`instantiation`

**DISCLAIMER** 
All PPI examples presented in this tutorial are created by computer scientist, do not make any sense, but serve purely illustrative purpose.

.. _installation:

------------
Installation 
------------

    In order to install the KAMI library you have to clone this repository using SSH

    .. code-block:: console

        git clone git@github.com:Kappa-Dev/KAMI.git

    or using HTTPS

    .. code-block:: console

        git clone https://github.com/Kappa-Dev/KAMI.git


    Install the library and its dependencies with `setup.py`

    .. code-block:: console

        cd KAMI
        python setup.py install


.. _entities:

------------------------------
KAMI entities and interactions
------------------------------

Similarly to such representations in `BioPAX <http://www.biopax.org/>`_ or `INDRA <http://indra.readthedocs.io/en/latest/modules/statements.html>`_, KAMI entites and interactions specify an intermediary representation format for defining protein-protein interactions (PPIs), their agents (roughly speaking proteins) and agents' components such as regions, sites, residues etc.

^^^^^^^^^^^^^
Genes in KAMI
^^^^^^^^^^^^^

In KAMI the basic agent of a PPI is a *gene*, from which we can further define its products (i.e. proteins) by providing specific regions, sites, residues, states and bounds. Therefore, in our system an agent corresponding to a gene actually represents not a single protein, but a feasible 'neighbourhood in the sequence space' of gene products.

Genes are defined by their Uniprot accession numbers. For example, we can define an object corresponding to the `EGFR <http://www.uniprot.org/uniprot/P00533>`_ gene as follows:

>>> egfr = Gene("P00533")

Now we would like to define *EGFR* who has key residue *Y* at the location *155* and, moreover, this residue should be phosphorylated:

>>> egfr_Y155 = Gene("P00533", residues=[Residue("Y", 155, state=State("phosphorylation", True))])

Define the gene _MAPK1_ who has protein kinase region:

>>> mapk1_PK = Gene("P28482", regions=[Region(name="Protein kinase", start=25, end=313)])


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Sites and Regions as agents of interactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


^^^^^^^^^^^^^^^^^^^^^^^^^
Modification interactions
^^^^^^^^^^^^^^^^^^^^^^^^^

Modifications in KAMI are defined as follows:

`Modification(enzyme, substrate, mod_target, mod_value=True, annotation=None, direct=False)`,

where `enzyme` and `substrate` are instances of the base `Actor` class, `mod_target` is either an object of the `Residue` or the `State` class (represents an object of modification), `mod_value` is a boolean flag which says whether the state of the target is being set to True or Flase. 

Example statement: *"Active MEK1 phosphorylates residue S727 of STAT3"*

>>> mek1 = Gene("Q02750", states=[State("activity", True)])
>>> stat3 = Gene("P40763")
>>> mod_target = Residue("S", 727, State("phosphorylation", False))
>>> mod1 = Modification(mek1, stat3, mod_target, mod_state=True)
>>> print(mod1)
Modification:
	Enzyme: Q02750
	Substrate: P40763
	Mod target: S727
	Value: True
	Direct? True


^^^^^^^^^^^^^^^^^^^^
Binding interactions
^^^^^^^^^^^^^^^^^^^^


.. _kami_hierarchy:

------------------------
Hierarchies: KAMI models
------------------------


.. _black_box:

---------
Black box
---------


.. _instantiation:

----------------------------
Concrete model instantiation
----------------------------